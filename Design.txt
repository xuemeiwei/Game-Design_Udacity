Hangman Design

In this project the word guess game called Hangman is designed. Mainly three entities are defined in this project, namely User, Game and Score. Here the entity “Score” is defined mainly to get the rankings of User. The parameters used in game are mainly defined in the entity “Game” as following:
 
1. word_to_guess: the original which the user needs to guess
2. letters_guessed: the letters the user already guessed
3. letters_right_position: put the letters already guessed correctly in their right position. Help the user to guess the whole word.
4. attempts_remaining: remaining attempts that the user has in the game. Game over if it equals 0.
5. history: all the guesses the user has made
6. game_over: status of the game
7. attempts_allowed: the total attempts the user can make. Default value is 9. It can be changed to adjust different game difficulty level.

When a new game is created the word to guess is created by randomly chosen from some the word library. Here the library of the words is a given list containing just several words and the word to guess is randomly chose from this list. The library can also be a very large dictionary imported outside. 

The action of guess is implemented in the function of “make_move”. The process of the guess is as follows:
Each time the user can only guess a single letter or the whole word otherwise it would raise error. When the guess is a single letter, the api will tell the user whether the guess is right or not. If the guess is right the api will put the letter in its right position in the original word. Otherwise attempts_remaining will decrease by 1. If the original answer is in the letters already guessed, the status of the game will change to “Game Over” and the user wins. When the user guess the whole word and if the guess is the exact word, the game is over and the user wins. If not, attempts_remaining will decrease by 1. When attempts_remaining equals zero, the status of the game will change to “Game Over” and the user loses.

